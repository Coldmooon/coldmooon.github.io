{"name":"Caffe 安装出错记录与解决办法","tagline":"Caffe","body":"# Caffe 安装错误记录及解决办法\r\n\r\n# 1）Fatal error : 'tr1/tuple' file not found \r\n出现该问题有两种情况，可以先尝试下面的链接：\r\nhttps://github.com/BVLC/caffe/issues/1358\r\n如果不行，那说明是 Makefile 文件除了问题。一般来说，按照\r\nhttps://github.com/BVLC/caffe/pull/1740\r\n里的 33a56e0 那个 post 来修改 Makefile 文件就解决了。\r\n在出错之前，Makefile 相关内容如下：\r\n```\r\nifeq ($(OSX), 1)\r\n  CXX := /usr/bin/clang++\r\n    CXXFLAGS += -stdlib=libstdc++\r\n    LINKFLAGS += -stdlib=libstdc++\r\n  # clang throws this warning for cuda headers\r\n  WARNINGS += -Wno-unneeded-internal-declaration\r\n  ifneq ($(findstring 10.10, $(shell sw_vers -productVersion)),)\r\n     CXXFLAGS += -stdlib=libc++\r\n     LINKFLAGS += -stdlib=libc++\r\n  endif\r\n\r\n  # gtest needs to use its own tuple to not conflict with clang\r\n  CXXFLAGS += -DGTEST_USE_OWN_TR1_TUPLE=1\r\n  # boost::thread is called boost_thread-mt to mark multithreading on OS X\r\n  LIBRARIES += boost_thread-mt\r\n  NVCCFLAGS += -DOSX\r\n```\r\n\r\n然后修改成 33a56e0 的样子就成功了。\r\n\r\n-------------------------------------------------------\r\n\r\n# 2) make: *** [matlab/caffe/caffe.mexmaci64] Error 255\r\n\r\n解决方法\r\nhttps://github.com/BVLC/caffe/issues/1212\r\n\r\n-------------------------\r\n\r\n# 3) make: *** [.build_release/tools/caffe.bin] Error 1\r\n\r\n解决方法\r\n存在上一次安装的残留文件。用 `make clean` 清除之前的安装，重新编译即可\r\n\r\n---------------------------------\r\n\r\n\r\n# 4) make: *** [runtest] Trace/BPT trap: 5\r\n\r\n解决方法：adna 没有安装 hdf5。重新安装 hdf5。\r\nhttps://github.com/BVLC/caffe/issues/454\r\n\r\n--------------------------------\r\n\r\n# 5) 错误: \r\n```\r\nBuilding with 'Xcode Clang++'.\r\nUndefined symbols for architecture x86_64:\r\n  \"std::string::find(char, unsigned long) const\", referenced from:\r\n      boost::basic_format<char, std::char_traits<char>, std::allocator<char> >::parse(std::string const&) in libcaffe.a(math_functions.o)\r\n      int boost::io::detail::upper_bound_from_fstring<std::string, std::ctype<char> >(std::string const&, std::string::value_type, std::ctype<char> const&, unsigned char) in libcaffe.a(math_functions.o)\r\n  \"std::string::compare(char const*) const\", referenced from:\r\n      _mexFunction in matcaffe.o\r\n      caffe::UpgradeV0PaddingLayers(caffe::NetParameter const&, caffe::NetParameter*) in libcaffe.a(upgrade_proto.o)\r\n      caffe::UpgradeLayerParameter(caffe::LayerParameter const&, caffe::LayerParameter*) in libcaffe.a(upgrade_proto.o)\r\n      caffe::UpgradeV0LayerType(std::string const&) in libcaffe.a(upgrade_proto.o)\r\n      caffe::Filler<float>* caffe::GetFiller<float>(caffe::FillerParameter const&) in libcaffe.a(dummy_data_layer.o)\r\n      caffe::Filler<double>* caffe::GetFiller<double>(caffe::FillerParameter const&) in libcaffe.a(dummy_data_layer.o)\r\n      caffe::WindowDataLayer<float>::DataLayerSetUp(std::vector<caffe::Blob<float>*, std::allocator<caffe::Blob<float>*> > const&, std::vector<caffe::Blob<float>*, std::allocator<caffe::Blob<float>*> >*) in libcaffe.a(window_data_layer.o)\r\n...\r\n```\r\n\r\n解决方法：\r\nhttps://github.com/BVLC/caffe/issues/1212\r\n再看->\r\nhttps://github.com/BVLC/caffe/pull/1310\r\n然后看->\r\nhttps://github.com/CellScope/caffe/commit/954ac8f1fca889ada7194188db2cda3c300b0be0\r\n\r\n在 makefile 中做如下更改\r\n```\r\n \t$(MATLAB_DIR)/bin/mex $(MAT$(PROJECT)_SRC) \\\r\n \t\t\tCXX=\"$(CXX)\" \\\r\n \t\t\tCXXFLAGS=\"\\$$CXXFLAGS $(MATLAB_CXXFLAGS)\" \\\r\n-\t\t\tCXXLIBS=\"\\$$CXXLIBS $(STATIC_LINK_COMMAND) $(LDFLAGS)\" -output $@\r\n+\t\t\tCXXLIBS=\"\\$$CXXLIBS $(STATIC_LINK_COMMAND) $(LDFLAGS) /usr/lib/libstdc++.dylib\" -output $@\r\n```\r\n---------------------------------------------------\r\n\r\n\r\n# 6）错误：\r\n```\r\nBuilding with 'Xcode Clang++'.\r\nUndefined symbols for architecture x86_64:\r\n  \"_mxArrayToString\", referenced from:\r\n      init(int, mxArray_tag**, int, mxArray_tag const**) in matcaffe.o\r\n      read_mean(int, mxArray_tag**, int, mxArray_tag const**) in matcaffe.o\r\n      _mexFunction in matcaffe.o\r\n  \"_mxCreateCellArray_700\", referenced from:\r\n      get_weights(int, mxArray_tag**, int, mxArray_tag const**) in matcaffe.o\r\n```\r\n----------------\r\n解决方法：\r\nhttps://github.com/BVLC/caffe/issues/915\r\n做两个改动，\r\n一、\r\nchange the `LIBRARY_DIRS` section of `Makefile.config` to read:\r\n`LIBRARY_DIRS := $(PYTHON_LIB) /Applications/MATLAB_R2014a.app/bin/maci64 /usr/local/lib /usr/lib`\r\n二、\r\nchange the `mexopts.sh` to include `10.10` wherever `10.7` was there ( 4 places). \r\n\r\n# 7） 按下述指引进行设置 makefile \r\nhttps://github.com/BVLC/caffe/pull/1740\r\n->\r\nhttps://github.com/shelhamer/caffe/commit/ab839f5b2f5c93da34c2ab797ab2a64b62645976\r\n\r\n\r\n# 8）错误:\r\n```\r\nBuilding with 'Xcode Clang++'.\r\nUndefined symbols for architecture x86_64:\r\n  \"google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(std::string const&, unsigned char*)\", referenced from:\r\n      caffe::Datum::SerializeWithCachedSizesToArray(unsigned char*) const in libcaffe.a(caffe.pb.o)\r\n      caffe::FillerParameter::SerializeWithCachedSizesToArray(unsigned char*) const in libcaffe.a(caffe.pb.o)\r\n      caffe::NetParameter::SerializeWithCachedSizesToArray(unsigned char*) const in libcaffe.a(caffe.pb.o)\r\n      caffe::SolverParameter::SerializeWithCachedSizesToArray(unsigned char*) const in libcaffe.a(caffe.pb.o)\r\n      caffe::SolverState::SerializeWithCachedSizesToArray(unsigned char*) const in libcaffe.a(caffe.pb.o)\r\n      caffe::NetState::SerializeWithCachedSizesToArray(unsigned char*) const in libcaffe.a(caffe.pb.o)\r\n      caffe::NetStateRule::SerializeWithCachedSizesToArray(unsigned char*) const in libcaffe.a(caffe.pb.o)\r\n```\r\n解决办法：出处忘记了...\r\n@reking, I see boost errors, which I vaguely recall getting myself. If I recall, Caffe was seeing Matlab's internal libraries earlier in the library path than my local homebrew libraries in /usr/local/lib. Caffe might be trying to link Matlab's version of the boost library, which, needless to say, isn't compatible with Caffe.\r\n\r\nTry changing the LIBRARY_DIRS := ... line in your Makefile.config so that the /usr/local/lib directory is before your Matlab library directory.\r\n\r\nMine looks like this:\r\n\r\nLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib $(MATLAB_DIR)/bin/maci64 /usr/lib\r\n\r\n----------------------------\r\n\r\n# 9) 错误:\r\n```\r\nBuilding with 'Xcode Clang++'.\r\nUndefined symbols for architecture x86_64:\r\n  \"google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray(std::string const&, unsigned char*)\", referenced from:\r\n      caffe::Datum::SerializeWithCachedSizesToArray(unsigned char*) const in libcaffe.a(caffe.pb.o)\r\n      caffe::FillerParameter::SerializeWithCachedSizesToArray(unsigned char*) const in libcaffe.a(caffe.pb.o)\r\n      caffe::NetParameter::SerializeWithCachedSizesToArray(unsigned char*) const in libcaffe.a(caffe.pb.o)\r\n      caffe::SolverParameter::SerializeWithCachedSizesToArray(unsigned char*) const in libcaffe.a(caffe.pb.o)\r\n      caffe::SolverState::SerializeWithCachedSizesToArray(unsigned char*) const in libcaffe.a(caffe.pb.o)\r\n      caffe::NetState::SerializeWithCachedSizesToArray(unsigned char*) const in libcaffe.a(caffe.pb.o)\r\n      caffe::NetStateRule::SerializeWithCachedSizesToArray(unsigned char*) const in libcaffe.a(caffe.pb.o)\r\n```\r\n解决办法：\r\n9） 的错误和 8）很相似。但是我注意到错误提示：\r\nclang++ .build_release/src/caffe/proto/caffe.pb.cc -stdlib=libstdc++ -DGTEST_USE_OWN_TR1_TUPLE=1\r\n\r\n有这么一行。在这一行里，有 `-stdlib=libstdc++` 字段。如果其他依赖库用 libc++ 编译的话，那么就会出现 9）的错误。解决办法是在 Makefile 文件里，将带有 libstdc++ 的行注释掉即可。\r\n\r\n2015.7.2 补充。今天在编译老版本 caffe-rc2 版本的时候，又出现了一次该错误。但当时我是把最新版本的 makefile.config 文件给复制过来用了，并没有重新填写。所以，考虑到这个情况。我又重新解压了一次 caffe-rc2.zip 压缩包，重新手动填写了一次 makefile.config 文件。再次编译就好了。\r\n\r\n--------------------------------\r\n\r\n# 10) Error with mexopencv\r\n\r\n出现这种错误的原因解释在下面链接的 OSX 一节：\r\nhttp://kyamagu.github.io/mexopencv/\r\n解决方法上面链接也给了。但是下面的链接讨论的更为详细：\r\nhttps://github.com/kyamagu/mexopencv/issues/71\r\n\r\n我自己的解决办法是，在 terminal 里输入\r\n```\r\nDYLD_INSERT_LIBRARIES=/usr/local/lib/libopencv_highgui.2.4.dylib:/usr/local/lib/libtiff.5.dylib /Applications/MATLAB_R2014b.app/bin/matlab\r\n```\r\n\r\n因为，`matlab` 运行 `RCNN` 代码时提示 `libopencv_highgui.2.4.dylib` 使用的是 `Matlab` 自己的。所以就在终端里插入系统库。\r\n而 `libopencv_highgui.2.4.dylib` 系统库又要调用 `libtiff.5.dylib`， 所以再继续插入 `libtiff.5.dylib`。\r\n\r\n# 11) Issue with libopenblas.so.0\r\n\r\n在编译 `caffe` 中的最后一步，运行 `make runtest` 时，出现了 `caffe` 无法找到 `libopenblas.so.0` 的错误。出现这个错误的原因是，从源码编译 `openblas` 时手动更改了安装路径。\r\n解决方法是，建立一个软连接到 `openblas` 的默认安装路径即可。\r\n```\r\ncd /opt\r\nsudo ln -s /usr/local/OpenBLAS/ .\r\n```\r\n\r\n然后将 `openblas` 的库所在位置添加到系统环境变量 `LD_LIBRARY_PATH`\r\n```\r\nexport LD_LIBRARY_PATH=/opt/OpenBLAS/lib/\r\nsudo ldconfig\r\n```\r\n\r\n这时，在编译就不会出错了。\r\n\r\n参考 https://github.com/sermanet/OverFeat/issues/10\r\n\r\n-------------------------------------------------\r\n\r\n# 12) 找不到 GLIBCXX_3.4.20 文件\r\n```\r\nInvalid MEX-file '/home/coldmoon/ComputerVision/Caffe/matlab/caffe/caffe.mexa64':\r\n/home/coldmoon/MATLAB/R2014b/bin/glnxa64/../../sys/os/glnxa64/libstdc++.so.6: version `GLIBCXX_3.4.20'\r\nnot found (required by /home/coldmoon/ComputerVision/Caffe/matlab/caffe/caffe.mexa64)\r\n```\r\n\r\n参考 \r\nhttp://askubuntu.com/questions/575505/glibcxx-3-4-20-not-found-how-to-fix-this-error\r\nhttp://stackoverflow.com/questions/16605623/where-can-i-get-a-copy-of-the-file-libstdc-so-6-0-15\r\n\r\n上面两个链接指出的是，在 `libstdc++.so.6` 中无法找到 `GLIBCXX_3.4.20` 时的解决办法。但在我系统里 OSX(10.10)，情况跟上述不一样。\r\n通过下列命令\r\n`find / -name \"libstdc++.so.6\"` 可以找到官方提供的库所在路径。\r\n然后进入该路径:\r\n`strings ./libstdc++.so.6 | grep GLIBCXX`\r\n可以看到，官方提供的 `libstdc++.so.6` 已经包含了  `GLIBCXX_3.4.20`。这说明 `caffe.mexa64` 所使用的库并非官方的库，而是 `matlab` 自己提供的库\r\n根据 https://github.com/rbgirshick/rcnn/issues/13 的说法，这是 `LD_LIBRARY_PATH` 设置不当造成的。导致了程序优先寻找 `matlab` 目录下的 `libstdc++.so.6`。至于 `matlab` 究竟引用了哪里的库，可以通过 `ldd` 命令查看。\r\n根据 https://github.com/rbgirshick/rcnn/issues/9\r\n在终端下，输入 `ldd caffe.mexa64`，可以看到一堆所引用的库路径。而在 `matlab` 的命令窗口中输入 `!ldd caffe.mexa64` 则可以看到 `matlab` 运行\r\n`caffe` 函数时，究竟在引用哪些库。不出意外的发现，`matlab` 引用的库路径果真都是 `matlab` 自己的。因为其中列出一条：\r\n`libstdc++.so.6 => /home/coldmoon/MATLAB/R2014b/sys/os/glnxa64/libstdc++.so.6 (0x00007f2664bb6000)`\r\n再次运行 `strings ./libstdc++.so.6 | grep GLIBCXX` ，就可以发现，果真没有 `GLIBCXX_3.4.20`. \r\n\r\n解决方法，参考 \r\nhttps://github.com/BVLC/caffe/issues/655 \r\nhttps://github.com/kyamagu/mexopencv/issues/64\r\nhttps://github.com/kyamagu/mexopencv/issues/62#issuecomment-15054244\r\n\r\n当我把所有!ldd caffe.mexa64 输出的结果都放到 LD_PRELOAD 中是，!ldd 这个命令会出错，即使不给它参数也会出错。因此，\r\n我只把 libstdc++ 放到了这个环境变量里。最终形成一个脚本文件来运行 matlab：\r\n\r\n```\r\n#!/bin/bash\r\nexport LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\necho \"LDPRELOAD is:\"\r\necho $LD_PRELOAD\r\n/home/coldmoon/MATLAB/R2014b/bin/matlab\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}